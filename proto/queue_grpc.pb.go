// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: queue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	QueueService_AddQueue_FullMethodName        = "/queue.QueueService/AddQueue"
	QueueService_AddQueueItem_FullMethodName    = "/queue.QueueService/AddQueueItem"
	QueueService_CleanQueue_FullMethodName      = "/queue.QueueService/CleanQueue"
	QueueService_DeleteQueueItem_FullMethodName = "/queue.QueueService/DeleteQueueItem"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	AddQueue(ctx context.Context, in *AddQueueRequest, opts ...grpc.CallOption) (*AddQueueResponse, error)
	AddQueueItem(ctx context.Context, in *AddQueueItemRequest, opts ...grpc.CallOption) (*AddQueueItemResponse, error)
	CleanQueue(ctx context.Context, in *CleanQueueRequest, opts ...grpc.CallOption) (*CleanQueueResponse, error)
	DeleteQueueItem(ctx context.Context, in *DeleteQueueItemRequest, opts ...grpc.CallOption) (*DeleteQueueItemResponse, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) AddQueue(ctx context.Context, in *AddQueueRequest, opts ...grpc.CallOption) (*AddQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddQueueResponse)
	err := c.cc.Invoke(ctx, QueueService_AddQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) AddQueueItem(ctx context.Context, in *AddQueueItemRequest, opts ...grpc.CallOption) (*AddQueueItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddQueueItemResponse)
	err := c.cc.Invoke(ctx, QueueService_AddQueueItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) CleanQueue(ctx context.Context, in *CleanQueueRequest, opts ...grpc.CallOption) (*CleanQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanQueueResponse)
	err := c.cc.Invoke(ctx, QueueService_CleanQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) DeleteQueueItem(ctx context.Context, in *DeleteQueueItemRequest, opts ...grpc.CallOption) (*DeleteQueueItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQueueItemResponse)
	err := c.cc.Invoke(ctx, QueueService_DeleteQueueItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations should embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	AddQueue(context.Context, *AddQueueRequest) (*AddQueueResponse, error)
	AddQueueItem(context.Context, *AddQueueItemRequest) (*AddQueueItemResponse, error)
	CleanQueue(context.Context, *CleanQueueRequest) (*CleanQueueResponse, error)
	DeleteQueueItem(context.Context, *DeleteQueueItemRequest) (*DeleteQueueItemResponse, error)
}

// UnimplementedQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) AddQueue(context.Context, *AddQueueRequest) (*AddQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueue not implemented")
}
func (UnimplementedQueueServiceServer) AddQueueItem(context.Context, *AddQueueItemRequest) (*AddQueueItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueueItem not implemented")
}
func (UnimplementedQueueServiceServer) CleanQueue(context.Context, *CleanQueueRequest) (*CleanQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanQueue not implemented")
}
func (UnimplementedQueueServiceServer) DeleteQueueItem(context.Context, *DeleteQueueItemRequest) (*DeleteQueueItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueueItem not implemented")
}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_AddQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).AddQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_AddQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).AddQueue(ctx, req.(*AddQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_AddQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).AddQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_AddQueueItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).AddQueueItem(ctx, req.(*AddQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_CleanQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CleanQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_CleanQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CleanQueue(ctx, req.(*CleanQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_DeleteQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).DeleteQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_DeleteQueueItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).DeleteQueueItem(ctx, req.(*DeleteQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddQueue",
			Handler:    _QueueService_AddQueue_Handler,
		},
		{
			MethodName: "AddQueueItem",
			Handler:    _QueueService_AddQueueItem_Handler,
		},
		{
			MethodName: "CleanQueue",
			Handler:    _QueueService_CleanQueue_Handler,
		},
		{
			MethodName: "DeleteQueueItem",
			Handler:    _QueueService_DeleteQueueItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
